#!/usr/bin/env python

#>locus  ploidy  chromosome      begin   end     zygosity        varType reference       allele1Seq      allele2Seq      allele1VarScoreVAF      allele2VarScoreVAF      allele1VarScoreEAF      allele2VarScoreEAF      allele1VarQuality       allele2VarQuality       allele1HapLink  allele2HapLink  allele1XRef     allele2XRef     evidenceIntervalId      allele1ReadCount        allele2ReadCount        referenceAlleleReadCount        totalReadCount  allele1Gene     allele2Gene     pfam    miRBaseId       repeatMasker    segDupOverlap   relativeCoverageDiploid calledPloidy    relativeCoverageNondiploid      calledLevel

#12665   2       chr1    775789  775791  het-alt complex AA      A               39      31      38      31      VQLOW   VQLOW                   dbsnp.129:rs55687311            5009    8       7       1       23      100506327:XR_108281.1:LOC100506327:INTRON:UNKNOWN-INC;643837:NR_015368.1:LOC643837:INTRON:UNKNOWN-INC   100506327:XR_108281.1:LOC100506327:INTRON:UNKNOWN-INC;643837:NR_015368.1:LOC643837:INTRON:UNKNOWN-INC                   (A)n:Simple_repeat:12.9 1  1.04    2       0.98    1.000

# mapping :
#   totalReadCount -> dp
#   allele{1,2}ReadCount -> ad
#   allele{1,2}VarScoreEAF -> qual
#   allele{1,2}VarScoreVAF -> gq
#   allele{1,2}VarQuality == 'VQHIGH'? -> passFilter

import sys
import os
import argparse
import time
from varnorm.VCFEntry import VCFEntry
from varnorm.VCFNormalization import VCFNormalization
from varnorm.varcharkey import VarCharKey


#CG format
# 2: chrom
# 3: start
# 4: end
# 5: zygosity
# 6: varType
# 7: ref
# 8: allele1
# 9: allele2
# 10: allele1VarScoreVAF
# 11: allele2VarScoreVAF
# 12: allele1VarScoreEAF
# 13: allele2VarScoreEAF
# 14: allele1VarQuality
# 15: allele2VarQuality
# 21: allele1ReadCount
# 22: allele2ReadCount
# 24: totalReadCount

def elementize(args):
    vn = VCFNormalization(None, args.reference, verbose=args.verbose)
    fi = open(args.inFile, 'rb')
    fo = open(args.outFile, 'wb')
    sample = args.sample
    dataset = args.dataset
    uniqvkey = set()
    for l in fi:
        try:
            if l.startswith('#') or l.startswith('>'):
                continue
            tokens = l.replace('\n', '').split('\t')
            if len(tokens) < 25:
                continue
            if tokens[5] == 'no-call':
                continue
            if tokens[5] == 'hom' and tokens[6] == 'ref':
                continue
            chrom = tokens[2].replace('chr', '')
            start = int(tokens[3]) + 1
            end = int(tokens[4])
            ref = tokens[7]
            alts = tokens[8:10]
            varScoresVAF = tokens[10:12]
            varScoresEAF = tokens[12:14]
            varQual = tokens[14:16]
            readCounts = tokens[21:23]
            dp = int(tokens[24]) if tokens[24] != '' else None
            
            if tokens[5] != 'hom':
                for a in range(len(alts)):
                    alt = alts[a]
                    if alt == ref or alt == '?':
                        continue
                    refIn = '-' if ref == '' else ref
                    altIn = '-' if alt == '' else alt

                    if len(refIn) > 1 or len(altIn) > 1 or refIn == '-' or altIn == '-':
                        [chrom, start_norm, end_norm, ref_norm, alt_norm] = vn.normAVar(chrom, start, end, refIn, altIn)
                    else:
                        ref_norm = refIn
                        alt_norm = altIn
                        start_norm = start
                        end_norm = end
                    vkey = VarCharKey.v2k(chrom, start_norm, end_norm, alt_norm)
                    if vkey in uniqvkey:
                        continue
                    else:
                        uniqvkey.add(vkey)
                    
                    print >> fo, VCFEntry(vkey, dataset, sample, 
                            ac=1, 
                            passFilter=varQual[a]=="VQHIGH", 
                            qual = float(varScoresEAF[a]) if varScoresEAF[a] != '' else -1, 
                            gq = float(varScoresVAF[a]) if varScoresVAF[a] != '' else -1,
                            dp = dp if dp else -1,
                            ad = int(readCounts[a]) if readCounts[a] != '' else -1)
            else: # homozygous alt
                a = 0
                alt = alts[a]
                if alt == ref or alt == '?':
                    continue
                refIn = '-' if ref == '' else ref
                altIn = '-' if alt == '' else alt

                if len(refIn) > 1 or len(altIn) > 1 or refIn == '-' or altIn == '-':
                    [chrom, start_norm, end_norm, ref_norm, alt_norm] = vn.normAVar(chrom, start, end, refIn, altIn)
                else:
                    ref_norm = refIn
                    alt_norm = altIn
                    start_norm = start
                    end_norm = end
                vkey = VarCharKey.v2k(chrom, start_norm, end_norm, alt_norm)
                if vkey in uniqvkey:
                    continue
                else:
                    uniqvkey.add(vkey)
                
                print >> fo, VCFEntry(vkey, dataset, sample, 
                        ac=2, 
                        passFilter=varQual[a]=="VQHIGH", 
                        qual = float(varScoresEAF[a]) if varScoresEAF[a] != '' else -1, 
                        gq = float(varScoresVAF[a]) if varScoresVAF[a] != '' else -1,
                        dp = dp if dp else -1,
                        ad = int(readCounts[a]) if readCounts[a] != '' else -1)


        except:
            print >> sys.stderr, l
            raise




if __name__ == '__main__':
    parser = argparse.ArgumentParser (description = __doc__, \
            formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('inFile', metavar='INPUT_FILE', \
            help="Input text file to load into database.")
    parser.add_argument('outFile', metavar="OUTPUT_FILE", \
            help='Output file. Default: stdout')
    parser.add_argument('--reference', metavar='REF_GENOME', \
            default=os.environ['HG19'], \
            help='Path to reference genome .fa file. Default: $HG19 environmental variable.')
    parser.add_argument('-v', '--verbose', \
            action='store_true', \
            default=False, \
            help='Run in verbose mode.')
    ts = str(int(time.time()))
    parser.add_argument('-d', '--dataset', \
            default="UNKNOWN-" + ts, \
            help="Dataset ID.")
    ts = str(int(time.time()))
    parser.add_argument('-s', '--sample', \
            default="SAMPLE-" + ts, \
            help='Sample tag.')
    args = parser.parse_args()
    sys.exit(elementize(args))





