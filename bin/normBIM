#!/usr/bin/env python

import sys
import os
import argparse
from varnorm.VCFNormalization import VCFNormalization

def normalize_bim(args):
    qq = VCFNormalization(
                inFile = None,
                genome = args.reference,
                vkey=False,
                verbose=args.verbose
            )
    
    fo = open(args.output, 'wb') if type(args.output) is str \
            else sys.stdout
    with open(args.inFile, 'rb') as fi:
        for l in fi:
            [chrom, vid, garbage, pos, ref, alt] = l.strip().split(' ')
            chrom = 'X' if chrom == '23' else chrom
            start = int(pos)
            end = start + len(ref) - 1
            [chrom, start_norm, end_norm, ref_norm, alt_norm] = \
                qq.normAVar(chrom, start, end, ref, alt)
            print >> fo, '\t'.join([vid, chrom, str(start_norm), \
                str(end_norm), ref_norm, alt_norm])
    fo.close()
    
      

if __name__ == '__main__':
    parser = argparse.ArgumentParser (description = __doc__, \
            formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('inFile', metavar='INPUT_FILE', \
            help="Input vcf file for normalization.")
    parser.add_argument('-o', '--output', metavar='OUTPUT_FILE', \
            default=sys.stdout, \
            help='Output file. Default: stdout')
    parser.add_argument('--reference', metavar='REF_GENOME', \
            default=os.environ['HG19'], \
            help='Path to reference genome .fa file. Default: $HG19 environmental variable.')
    parser.add_argument('-v', '--verbose', \
            action='store_true', \
            default=False, \
            help='Run in verbose mode.')
    parser.add_argument('--novkey', \
            action='store_true', \
            default=False, \
            help='Do not generate vkey.')
    parser.add_argument('-s', '--sample', \
            action='store_true', \
            default=False, \
            help='Keep sample information.')
    args = parser.parse_args()
    sys.exit(normalize_bim(args))

