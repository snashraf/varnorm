#!/usr/bin/env python

import sys
import os
import argparse
from varnorm.VCFNormalization import VCFNormalization

def normalize_vcf(args):
    qq = VCFNormalization(
                inFile = args.inFile,
                genome = args.reference,
                vkey=(not args.novkey),
                verbose=args.verbose
            )
    if type(args.output) is str:
        out_file_token = args.output.split("/")
        dirs_to_create = '/'.join(out_file_token[:(len(out_file_token)-1)])
        if dirs_to_create and not os.path.exists(dirs_to_create):
          os.makedirs(dirs_to_create)

    fo = open(args.output, 'wb') if type(args.output) is str else sys.stdout
    qq.run(fo, args.sample)
    if fo != sys.stdout:
        fo.close()
       

if __name__ == '__main__':
    parser = argparse.ArgumentParser (description = __doc__, \
            formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('inFile', metavar='INPUT_FILE', \
            help="Input vcf file for normalization.")
    parser.add_argument('-o', '--output', metavar='OUTPUT_FILE', \
            default=sys.stdout, \
            help='Output file. Default: stdout')
    parser.add_argument('--reference', metavar='REF_GENOME', \
            default=os.environ['HG19'], \
            help='Path to reference genome .fa file. Default: $HG19 environmental variable.')
    parser.add_argument('-v', '--verbose', \
            action='store_true', \
            default=False, \
            help='Run in verbose mode.')
    parser.add_argument('--novkey', \
            action='store_true', \
            default=False, \
            help='Do not generate vkey.')
    parser.add_argument('-s', '--sample', \
            action='store_true', \
            default=False, \
            help='Keep sample information.')
    args = parser.parse_args()
    sys.exit(normalize_vcf(args))

